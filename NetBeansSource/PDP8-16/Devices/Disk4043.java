/*
 * Disk4043.java
 *
 * Created on May 29, 2005, 12:57 PM
 */

/**
 *
 * @author  wvdmark@computer.org
 */

package Devices;

import java.awt.Color;
import javax.swing.*;
import java.awt.event.*;

public class Disk4043 extends JFrame implements Logic.Constants, MouseListener, ActionListener {

    /** Creates new form Disk4043 */
    @SuppressWarnings("LeakingThisInConstructor")
    public Disk4043(Logic.SI3040 si3040) {
        this.si3040 = si3040;
        setTitle("SI3040-M4043");
        initComponents();
        diskUnit0.startUnit(this,"unit0");
        diskUnit1.startUnit(this,"unit1");
        diskUnit2.startUnit(this,"unit2");
        diskUnit3.startUnit(this,"unit3");

        addMouseListener(this);
        junit[0][0] = new JMenu("Unit 0 fixed");
        JMenuItem mount0 = new JMenuItem("Mount");
        mount0.addActionListener(this);
        mount0.setName("0");
        junit[0][0].add(mount0);
        JMenuItem unmount0 = new JMenuItem("Unmount");
        unmount0.addActionListener(this);
        unmount0.setName("1");
        junit[0][0].add(unmount0);
        jPopupMenu1.add(junit[0][0]);
        junit[0][1] = new JMenu("Unit 0 rem");
        JMenuItem mount0r = new JMenuItem("Mount");
        mount0r.addActionListener(this);
        mount0r.setName("2");
        junit[0][1].add(mount0r);
        JMenuItem unmount0r = new JMenuItem("Unmount");
        unmount0r.addActionListener(this);
        unmount0r.setName("3");
        junit[0][1].add(unmount0r);
        jPopupMenu1.add(junit[0][1]);
        junit[1][0] = new JMenu("Unit 1 fixed");
        JMenuItem mount1 = new JMenuItem("Mount");
        mount1.addActionListener(this);
        mount1.setName("4");
        junit[1][0].add(mount1);
        JMenuItem unmount1 = new JMenuItem("Unmount");
        unmount1.addActionListener(this);
        unmount1.setName("5");
        junit[1][0].add(unmount1);
        jPopupMenu1.add(junit[1][0]);
        junit[1][1] = new JMenu("Unit 1 rem");
        JMenuItem mount1r = new JMenuItem("Mount");
        mount1r.addActionListener(this);
        mount1r.setName("6");
        junit[1][1].add(mount1r);
        JMenuItem unmount1r = new JMenuItem("Unmount");
        unmount1r.addActionListener(this);
        unmount1r.setName("7");
        junit[1][1].add(unmount1r);
        jPopupMenu1.add(junit[1][1]);
        jPopupMenu1.addSeparator();
        ButtonGroup group = new ButtonGroup();
        JRadioButtonMenuItem nofmt = new JRadioButtonMenuItem("Data");
        nofmt.addActionListener(this);
        nofmt.setName("8");
        nofmt.setSelected(true);
        group.add(nofmt);
        jPopupMenu1.add(nofmt);
        JRadioButtonMenuItem fmt = new JRadioButtonMenuItem("Format");
        fmt.addActionListener(this);
        fmt.setName("9");
        group.add(fmt);
        jPopupMenu1.add(fmt);

        chooser = new javax.swing.JFileChooser();
        chooser.addChoosableFileFilter(new ImageFileFilter());

        for (int u=0;u<2;u++) {
            for (int r=0;r<2;r++) {
                if (si3040.data.getProp("Disk4043-" + u + "-" + r)!=null) {
                    openDisk(u,r);
                }
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPanel2 = new javax.swing.JPanel();
        diskUnit0 = new Devices.DiskUnit();
        diskUnit1 = new Devices.DiskUnit();
        diskUnit2 = new Devices.DiskUnit();
        diskUnit3 = new Devices.DiskUnit();

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 8, true));
        jPanel2.setMaximumSize(new java.awt.Dimension(316, 180));
        jPanel2.setMinimumSize(new java.awt.Dimension(166, 90));
        jPanel2.setPreferredSize(new java.awt.Dimension(316, 180));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        diskUnit0.setMaximumSize(new java.awt.Dimension(300, 60));
        jPanel2.add(diskUnit0, new java.awt.GridBagConstraints());

        diskUnit1.setMaximumSize(new java.awt.Dimension(300, 60));
        diskUnit1.setUnit(1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(diskUnit1, gridBagConstraints);

        diskUnit2.setMaximumSize(new java.awt.Dimension(300, 60));
        diskUnit2.setUnit(2);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel2.add(diskUnit2, gridBagConstraints);

        diskUnit3.setMaximumSize(new java.awt.Dimension(300, 60));
        diskUnit3.setUnit(3);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel2.add(diskUnit3, gridBagConstraints);

        getContentPane().add(jPanel2, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        si3040.data.CloseAllDevs();
        //System.exit(0);
    }//GEN-LAST:event_exitForm


    public void mouseClicked(java.awt.event.MouseEvent e) {
        if (e.isPopupTrigger()) {
            jPopupMenu1.show(e.getComponent(),e.getX(),e.getY());
        }
    }

    public void mouseEntered(java.awt.event.MouseEvent e) {
    }

    public void mouseExited(java.awt.event.MouseEvent e) {
    }

    public void mousePressed(java.awt.event.MouseEvent e) {
        if (e.isPopupTrigger()) {
            jPopupMenu1.show(e.getComponent(),e.getX(),e.getY());
        }
    }

    public void mouseReleased(java.awt.event.MouseEvent e) {
        if (e.isPopupTrigger()) {
            jPopupMenu1.show(e.getComponent(),e.getX(),e.getY());
        }
    }

    public void actionPerformed(java.awt.event.ActionEvent e) {
        AbstractButton x = (AbstractButton)(e.getSource());
        Integer val =  new Integer(Integer.parseInt(x.getName()));
        switch (val.intValue()) {
            case 0: openDisk(0,0); break;
            case 1: closeDisk(0,0,false); break;
            case 2: openDisk(0,1); break;
            case 3: closeDisk(0,1,false); break;
            case 4: openDisk(1,0); break;
            case 5: closeDisk(1,0,false); break;
            case 6: openDisk(1,1); break;
            case 7: closeDisk(1,1,false); break;
            case 8: si3040.fmton = false; break;
            case 9: si3040.fmton = true; break;
        }
        repaint();
    }

    private void openDisk(int unit, int removable) {
        java.io.File file = null;
        java.io.File rkfile = null;
        boolean convert = false;
        String dfile = si3040.data.getProp("Disk4043-" + unit + "-" + removable);
        if (dfile==null) {
            int option = chooser.showOpenDialog(this);
            if (option == javax.swing.JFileChooser.APPROVE_OPTION) {
                file = chooser.getSelectedFile();
            }
        } else file = new java.io.File(dfile);
        if (file.getName().endsWith(".rk05")) {
            convert = true;
            try {
                String rkfname = file.getCanonicalPath();
                rkfile = new java.io.File(rkfname);
                int ind = rkfname.lastIndexOf(".rk05");
                dfile = rkfname.substring(0,ind)+".m43";
                file = new java.io.File(dfile);
            }
            catch(java.io.IOException e){ System.out.println(e);
            }
        }
        if (file != null) {
            closeDisk(unit, removable, true);
            try {
                if (file.isFile()) {
                    if (file.canWrite()) {
                        si3040.disk[unit][removable] = new java.io.RandomAccessFile(file, "rw");
                    } else {
                        System.out.println("File seems to be busy!");
                        JOptionPane.showMessageDialog(this,
                                file + " is not accessible - read-only?!",
                                "Disk 4043",
                                JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                } else {
                        JOptionPane.showMessageDialog(this,
                                file + " is not found!",
                                "Disk 4043",
                                JOptionPane.WARNING_MESSAGE);
                        return;
                } 
                si3040.sel[unit][removable] = true;
                String rtex = " fixed: "; if (removable>0) rtex = " rem: ";
                junit[unit][removable].setText("Unit " + unit + rtex + file.getName());
                si3040.data.setProp("Disk4043-" + unit + "-" + removable, file.getCanonicalPath());
            }
            catch(java.io.IOException e){ System.out.println(e);
            }
            if (si3040.sel[unit][removable]) {
                if (file.length()==0) {
                    if (convert) {
                        try {
                            si3040.disk[unit][removable] = new java.io.RandomAccessFile(file,"rw");
                            java.io.RandomAccessFile rkdisk = new java.io.RandomAccessFile(rkfile,"r");
                            for (int u=0;u<2;u++) {
                                for (int block=0;block<0314;block++) {
                                    for (int sect=0;sect<16;sect++) {
                                        rkdisk.seek((( (u*0313+block) << 4 ) | sect)*(384));
                                        si3040.disk[unit][removable].seek(28 + (( (u*0314+block) << 4) | sect)*(384+33));
                                        si3040.disk[unit][removable].writeInt((8<<24)+( (u*0314+block) << 4));
                                        si3040.disk[unit][removable].seek(33 + (( (u*0314+block) << 4) | sect)*(384+33));
                                        for (int b=0;b<384;b++) {
                                            si3040.disk[unit][removable].write(rkdisk.read());
                                        }
                                    }
                                }
                            }
                            rkdisk.close();
                        }
                        catch(java.io.IOException e){ System.out.println(e);
                        }
                        System.out.println("rk05 file transformed to m43 format!");
                    }
                    else if (si3040.fmton) {
                        try {
                            si3040.disk[unit][removable] = new java.io.RandomAccessFile(file,"rw");
                            for (int block=0;block<0630;block++) {
                                for (int sect=0;sect<16;sect++) {
                                    si3040.disk[unit][removable].seek(28 + ((block << 4) | sect)*(384+33));
                                    si3040.disk[unit][removable].writeInt((8<<24)+(block<<4));
                                }
                            }
                            for (int b=0;b<385;b++) {
                                si3040.disk[unit][removable].write(0x0);
                            }
                        }
                        catch(java.io.IOException e){ System.out.println(e);
                        }
                        System.out.println("New disk-file formatted!");
                    } else {
                        si3040.sel[unit][removable] = false;
                        closeDisk(unit, removable, false);
                        System.out.println("Set Format before mounting empty disk-file!");
                    }
                } else {
                    boolean test = true;
                    try {
                        for (int i=0;i<28;i++) {
                            if (si3040.disk[unit][removable].read()!= 0x00) test = false;
                        }
                        if (si3040.disk[unit][removable].read()!= 0x08) test=false;
                        if (test) {
                        } else {
                            System.out.println("Wrong filetype: not m43 disk file");
                            closeDisk(unit, removable, false);
                        }
                    }
                    catch(java.io.IOException e){ System.out.println(e);
                    }
                }
            }
        } else System.out.println("No file selected");

    }

    public void closeDisk(int unit, int removable, boolean keepname) {
        if (si3040.sel[unit][removable]) {
            try {
                si3040.disk[unit][removable].close();
            }
            catch(java.io.IOException e){
            }
            si3040.disk[unit][removable] = null;
            si3040.sel[unit][removable] = false;
            si3040.track[unit] = 0;
        }
        if (!keepname) {
            String rtex = " fixed"; if (removable>0) rtex = " rem";
            junit[unit][removable].setText("Unit " + unit + rtex);
            si3040.data.setProp("Disk4043-" + unit + "-" + removable);
        }
    }

    private static class ImageFileFilter extends javax.swing.filechooser.FileFilter {

        public boolean accept(java.io.File file) {
            if (file == null)
                return false;
            return file.isDirectory() || file.getName().toLowerCase().endsWith(".m43");
        }

        public String getDescription() {
            return "m43 disk files (*.m43)";
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public Devices.DiskUnit diskUnit0;
    public Devices.DiskUnit diskUnit1;
    private Devices.DiskUnit diskUnit2;
    private Devices.DiskUnit diskUnit3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    // End of variables declaration//GEN-END:variables
    public Logic.SI3040 si3040;
    JMenu junit[][] = {{null,null},{null,null},{null,null},{null,null}};
    javax.swing.JFileChooser chooser;
}
